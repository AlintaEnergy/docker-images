trigger: none
pr:
  autoCancel: true
  branches:
    include:
    - master
stages:
  - stage: Start_VM
    jobs:
      - job: Start_VM
        pool:
          name: DEVDEMO1US1
        steps:
          - task: vfabing.AzureVirtualMachineManagerTask.custom-build-release-task.AzureVirtualMachineManagerTask@1
            displayName: "Start Docker Build VM"
            inputs:
              Action: "Start VM"
              azureSubscription: "AzureSubscription"
              ResourceGroupName: $(docker.build.vm.resourceGroupName)
              VmName: $(docker.build.vm.name)
  - stage: Build_Images
    dependsOn: Start_VM
    jobs:
      - job: Connect_Asset_Drive
        displayName: "Connect to Azure File Connect to Azure File Share"
        pool:
          name: Docker
        steps:
          - powershell: |
              Test-NetConnection -ComputerName "$(shared.folder.server)" -Port 445
              Invoke-Expression -Command "cmdkey /add:$(shared.folder.server) /user:Azure\dockerassets /pass:$(azure.fileshare.password)"
              New-PSDrive -Name Z -PSProvider FileSystem -Root "\\$(shared.folder.server)\docker-assets" -Persist -ErrorAction SilentlyContinue
      - job: Build_Base_Images
        dependsOn: Connect_Asset_Drive
        timeoutInMinutes: 720
        displayName: "Build Base Images"
        pool:
          name: Docker
        steps:
          - task: Docker@2
            displayName: login
            inputs:
              containerRegistry: "docker-registry"
              command: login
          - checkout: self
            clean: all
          - powershell: |
              $sourceBranch = "$(System.PullRequest.SourceBranch)"
              $tags = "blank"
              if ($sourceBranch.Contains("feature")) {
                $pattern = "^.*/feature/([0-9]\.[0-9]\.[0-9])"
                $result = [regex]::match($sourceBranch,$pattern).Groups[1].Value
                $tags = "*:$result*-ltsc2019"
              }
              else
              {
                $tags = "$(image.tags)"
              }

              Write-Host "Setting image tags to $tags"
              Write-Host "##vso[task.setvariable variable=image.tags]$tags"
              Write-Host "##vso[task.setvariable variable=variant.tags]$tags"
              $(sitecore.democontainer.password) | docker login -u "$(container.registry.username)" --password-stdin $(container.registry.fullname)
              $modulePath = (Join-Path "$(Build.SourcesDirectory)" "modules")
              Import-Module (Join-Path $modulePath "SitecoreImageBuilder") -Force
              Write-Host "Building image tags $tags"
              SitecoreImageBuilder\Invoke-PackageRestore -Path (Join-Path "$(Build.SourcesDirectory)" "images") -Destination $(install.source.path) -Tags $tags -SitecoreUsername $(sitecore.username) -SitecorePassword $(sitecore.password)
              SitecoreImageBuilder\Invoke-Build -Path (Join-Path "$(Build.SourcesDirectory)" "images") -InstallSourcePath $(install.source.path) -Registry $(container.registry.name) -Tags $tags
            errorActionPreference: silentlyContinue
            continueOnError: "true"
      - job: Build_Variants
        dependsOn: Build_Base_Images
        displayName: "Build Variant Images"
        pool:
          name: Docker
        steps:
          - task: Docker@2
            displayName: login
            inputs:
              containerRegistry: "docker-registry"
              command: login
          - checkout: self
            clean: all
          - powershell: |
              $sourceBranch = "$(System.PullRequest.SourceBranch)"
                            $tags = "blank"
              if ($sourceBranch.Contains("feature")) {
                $pattern = "^.*/feature/([0-9]\.[0-9]\.[0-9])"
                $result = [regex]::match($sourceBranch,$pattern).Groups[1].Value
                $tags = "*:$result*-ltsc2019"
              }
              else
              {
                $tags = "$(variant.tags)"
              }
              Write-Host "Setting image tags to $tags"
              Write-Host "##vso[task.setvariable variable=image.tags]$tags"
              Write-Host "##vso[task.setvariable variable=variant.tags]$tags"
              $(sitecore.democontainer.password) | docker login -u "$(container.registry.username)" --password-stdin sitecoredemocontainers.azurecr.io
              $modulePath = (Join-Path "$(Build.SourcesDirectory)" "modules")
              Import-Module (Join-Path $modulePath "SitecoreImageBuilder") -Force
              Write-Host "Building variant tags $tags"
              SitecoreImageBuilder\Invoke-PackageRestore -Path (Join-Path "$(Build.SourcesDirectory)" "variants") -Destination $(install.source.path) -Tags $tags -SitecoreUsername $(sitecore.username) -SitecorePassword $(sitecore.password)
              SitecoreImageBuilder\Invoke-Build -Path (Join-Path "$(Build.SourcesDirectory)" "variants") -InstallSourcePath $(install.source.path) -Registry $(container.registry.name) -Tags $tags
            errorActionPreference: silentlyContinue
            continueOnError: "true"
            timeoutInMinutes: 720
  - stage: Build_Linux_Images
    jobs:
    - job: Build_Linux_Images
      timeoutInMinutes: 720
      displayName: "Build Linux Images"
      pool:
          vmImage: 'ubuntu-16.04'
      steps:
        - task: Docker@2
          enabled: true
          displayName: login
          inputs:
              containerRegistry: "docker-registry"
              command: login
        - checkout: self
          clean: all
        - task: Bash@3
          inputs:
              targetType: inline
              script: |
                sudo mkdir /mnt/dockerassets
                if [ ! -d "/etc/smbcredentials" ]; then
                sudo mkdir /etc/smbcredentials
                fi
                if [ ! -f "/etc/smbcredentials/dockerassets.cred" ]; then
                    sudo bash -c 'echo "username=dockerassets" >> /etc/smbcredentials/dockerassets.cred'
                    sudo bash -c 'echo "password=$(azure.fileshare.password)" >> /etc/smbcredentials/dockerassets.cred'
                fi
                sudo chmod 600 /etc/smbcredentials/dockerassets.cred

                sudo bash -c 'echo "//$(shared.folder.server)/docker-assets /mnt/dockerassets cifs nofail,vers=3.0,credentials=/etc/smbcredentials/dockerassets.cred,dir_mode=0777,file_mode=0777,serverino" >> /etc/fstab'
                sudo mount -t cifs //$(shared.folder.server)/docker-assets /mnt/dockerassets -o vers=3.0,credentials=/etc/smbcredentials/dockerassets.cred,dir_mode=0777,file_mode=0777,serverino

        - powershell: |
            $sourceBranch = "$(System.PullRequest.SourceBranch)"
            $tags = "blank"
            if ($sourceBranch.Contains("feature")) {
              $pattern = "^.*/feature/([0-9]\.[0-9]\.[0-9])"
              $result = [regex]::match($sourceBranch,$pattern).Groups[1].Value
              $tags = "*:$result*"
            }
            else
            {
              $tags = "$(image.tags)"
            }

            Write-Host "Setting image tags to $tags"
            Write-Host "##vso[task.setvariable variable=image.tags]$tags"
            Write-Host "##vso[task.setvariable variable=variant.tags]$tags"
            $(sitecore.democontainer.password) | docker login -u "$(container.registry.username)" --password-stdin $(container.registry.fullname)
            $modulePath = (Join-Path "$(Build.SourcesDirectory)" "modules")
            Import-Module (Join-Path $modulePath "SitecoreImageBuilder") -Force
            Write-Host "Building image tags $tags"
            SitecoreImageBuilder\Invoke-PackageRestore -Path (Join-Path "$(Build.SourcesDirectory)" "linux") -Destination "/mnt/dockerassets" -Tags $tags -SitecoreUsername $(sitecore.username) -SitecorePassword $(sitecore.password)
            SitecoreImageBuilder\Invoke-Build -Path (Join-Path "$(Build.SourcesDirectory)" "linux") -InstallSourcePath "/mnt/dockerassets" -Registry $(container.registry.name) -Tags $tags
          errorActionPreference: silentlyContinue
          continueOnError: "true"
